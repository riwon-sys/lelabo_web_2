Spring 어노테이션 사용 예시

1. @SpringBootApplication
사용 위치: AppStart.java 클래스 안, public class AppStart 바로 위에
설명: Spring Boot 애플리케이션을 시작하는 어노테이션
java
복사
@SpringBootApplication
public class AppStart {
    public static void main(String[] args) {
        SpringApplication.run(AppStart.class, args);
    }
}

2. @Controller
사용 위치: Controller.java 클래스 안, public class Controller 바로 위에
설명: HTTP 요청을 처리하는 컨트롤러 클래스
java
복사
@Controller
@RequestMapping("/somePath")
public class SomeController {
    @GetMapping
    public String showForm() {
        return "formPage";  // formPage.jsp로 이동
    }
}

3. @RestController
사용 위치: Controller.java 클래스 안, public class Controller 바로 위에
설명: JSON 또는 XML로 데이터를 반환하는 RESTful 웹 서비스 클래스
java
복사
@RestController
@RequestMapping("/api/v1")
public class ApiController {
    @GetMapping("/data")
    public ResponseEntity<Data> getData() {
        return ResponseEntity.ok(new Data());
    }
}

4. @RequestMapping
사용 위치: Controller.java 클래스 또는 메서드 위
설명: HTTP 요청을 특정 메서드에 매핑, 기본적으로 모든 HTTP 메서드(GET, POST 등)에 사용
java
복사
@RequestMapping("/somePath")
public String handleRequest() {
    return "responsePage";
}

5. @PostMapping
사용 위치: Controller.java 클래스 내의 메서드 위
설명: HTTP POST 요청 매핑 (주로 데이터 생성 시 사용)
java
복사
@PostMapping("/create")
public String createEntity(@RequestBody Entity entity) {
    service.save(entity);
    return "redirect:/somePath";
}

6. @GetMapping
사용 위치: Controller.java 클래스 내의 메서드 위
설명: HTTP GET 요청 매핑 (주로 데이터 조회 시 사용)
java
복사
@GetMapping("/read")
public ResponseEntity<Entity> getEntity(@RequestParam("id") Long id) {
    Entity entity = service.findById(id);
    return ResponseEntity.ok(entity);
}

7. @PutMapping
사용 위치: Controller.java 클래스 내의 메서드 위
설명: HTTP PUT 요청 매핑 (주로 데이터 수정 시 사용)
java
복사
@PutMapping("/update")
public ResponseEntity<Entity> updateEntity(@RequestBody Entity entity) {
    Entity updatedEntity = service.update(entity);
    return ResponseEntity.ok(updatedEntity);
}

8. @DeleteMapping
사용 위치: Controller.java 클래스 내의 메서드 위
설명: HTTP DELETE 요청 매핑 (주로 데이터 삭제 시 사용)
java
복사
@DeleteMapping("/delete/{id}")
public ResponseEntity<Void> deleteEntity(@PathVariable("id") Long id) {
    service.delete(id);
    return ResponseEntity.noContent().build();
}

9. @ResponseBody
사용 위치: Controller.java 클래스 내의 메서드 위 (또는 @RestController 사용 시 자동 포함)
설명: 반환되는 객체를 JSON 형태로 응답 본문에 담아 반환
java
복사
@ResponseBody
@GetMapping("/json")
public Data getJsonData() {
    return new Data();  // JSON 응답
}

10. @RequestParam
사용 위치: Controller.java 클래스 내의 메서드 매개변수에
설명: HTTP 요청의 쿼리 문자열 또는 폼 데이터에서 매개변수를 추출
java
복사
@GetMapping("/paramExample")
public String example(@RequestParam String param) {
    return "Parameter: " + param;
}

11. @RequestBody
사용 위치: Controller.java 클래스 내의 메서드 매개변수에
설명: HTTP 요청 본문에 있는 JSON 데이터를 자바 객체로 변환
java
복사
@PostMapping("/create")
public String createEntity(@RequestBody Entity entity) {
    service.save(entity);
    return "Entity created";
}

12. @ModelAttribute
사용 위치: Controller.java 클래스 내의 메서드 매개변수에
설명: HTTP 요청 파라미터를 모델 객체에 바인딩
java
복사
@PostMapping("/form")
public String processForm(@ModelAttribute Entity entity) {
    service.save(entity);
    return "redirect:/somePage";
}

13. @Component
사용 위치: 일반적인 자바 클래스 위
설명: 빈을 자동으로 등록하는 어노테이션 (일반적인 컴포넌트)
java
복사
@Component
public class MyComponent {
    // some logic
}

14. @Service
사용 위치: 서비스 클래스 위
설명: 비즈니스 로직을 담당하는 서비스 클래스를 정의
java
복사
@Service
public class MyService {
    // 비즈니스 로직
}

15. @Mapper
사용 위치: MyBatis Mapper 인터페이스 위
설명: MyBatis에서 SQL 매핑을 담당하는 인터페이스
java
복사
@Mapper
public interface MyMapper {
    List<Entity> findAll();
}


[AppStart] 클래스
역할: 서버를 시작할 때 필요한 준비를 하는 클래스예요.
@SpringBootApplication: 이게 있으면, 스프링 부트가 서버를 시작할 준비를 다 해줘요.
[XXXController] 클래스 (클라이언트와 소통하는 클래스)
역할: 사용자가 웹사이트에서 요청하는 것에 대해 서버가 응답하는 역할을 해요.
@Controller: 사용자가 요청하면, HTML을 보여주는 역할을 해요.
@RestController: 이건 사용자가 요청하면, 서버가 데이터를 주는 역할을 해요. 주로 웹사이트가 아닌 다른 프로그램과 소통할 때 사용해요.
@RequestMapping: 어떤 주소(URL)에 대해 응답할지 정해요.
@PostMapping, @GetMapping, @PutMapping, @DeleteMapping: 각각 데이터를 추가하거나, 가져오거나, 수정하거나, 삭제하는 작업을 할 때 사용해요.
@ResponseBody: 서버가 응답을 주는데, 데이터를 바로 보내주는 역할을 해요.
@RequestParam: 웹에서 보낸 데이터를 받아서 사용할 수 있어요.
@RequestBody: 사용자가 보낸 내용을 그대로 받아서, 프로그램에서 사용할 수 있게 해줘요.
@ModelAttribute: 요청된 데이터에서 필요한 부분을 꺼내서 사용할 수 있어요.
@Autowired: 다른 클래스에서 필요한 것들을 자동으로 연결해줘요.
[XXXService] 클래스 (작업을 처리하는 클래스)
역할: 실제로 데이터를 처리하는 일을 해요. 예를 들어, 숫자를 계산하거나 데이터를 확인하는 일이죠.
@Service: 이건 "서비스"라고 알려주는 표시예요.
@Autowired: 필요한 다른 것들을 자동으로 연결해줘요.
[XXXMapper] 인터페이스 (데이터 저장/불러오기)
역할: 데이터베이스에서 데이터를 가져오거나, 저장하는 역할을 해요.
@Mapper: 데이터베이스와 연결해주는 역할을 해요.
@Insert, @Select, @Update, @Delete: 각각 데이터를 추가하거나, 가져오거나, 수정하거나, 삭제하는 일을 해요.
@Options: SQL 작업에 추가적인 옵션을 넣을 때 사용해요.
[그 외]
@Component: 이건 스프링이 관리할 수 있도록 클래스에 붙여주는 표시예요.
[용어]
IOC: "스프링이 객체를 관리해준다"는 뜻이에요. 우리가 직접 객체를 만들지 않아도, 스프링이 알아서 만들어줘요.
DI: "스프링이 필요한 객체를 자동으로 연결해준다"는 뜻이에요. 예를 들어, @Autowired를 사용하면, 필요한 것들을 자동으로 연결해줘요.
AOP: "필요한 작업을 따로 분리해서 관리할 수 있게 도와준다"는 뜻이에요. 예를 들어, 로그를 찍거나 오류를 처리하는 일을 따로 관리할 수 있게 해줘요.