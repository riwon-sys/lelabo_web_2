[ @ : 어노테이션 ]
	1. 정의 : java 및 라이브러리(프레임워크) 에서 코드에 메타데이터를 추가 하는 문법
	2. 목적 : 1. 메타데이터 제공 2.코드 간소화 3. 가독성 향상
	3. 메타데이터
		1. 정의 : 코드를 설명하는 데이터
		2. 목적 : 자바 코드에 추가적인 데이터를 주입 할때 사용된다.
		3. 동작 방식
			1. 컴파일 : 프로그램이 처음으로 실행 할때 클래스들을 읽어(번역) 오는 방식
			2. 리플렉션 : 런타임( 실행중 ) 클래스를 읽어와서 동적으로 메모리(JVM) 에 객체를 생성
				- Class.forName("com.mysql.cj.jdbc.Driver"); : Driver 클래스를 읽어드리고 인스턴스를 생성
				- 컴파일 시점이 아닌 실행중( Runtime )에 클래스 정보를 가져오고 인스턴스를 (자동) 생성 하는 방식

		* 코드 위에 @적고 아래 코드를 사용하는 방법를 스티커 처럼 부착 , 스티커 : 라이브러리 회사들이 만들어준다.
		@스티커용어	: 아래 클래스는 내가 지정한 *스티커/설명서/태그/라벨(택배 :취급주의)* 처럼 사용해 라는 뜻
		class 클래스명{}

	4. 어노테이션 종류
		1. 표준 어노테이션 : java에서 기본적으로 제공하는 어노테이션
			@Override : 부모 메소드를 오버라이딩(재정의) 설명 할때 사용되는 어노테이션 [*]
			@Deprecated : 더 이상 사용하지 않는 코드 라고 설명할때 사용되는 어노테이션
			등등

		2. 메타 어노테이션 : 어노테이션 자체에 코드를 정의하거나 동작 제어할 때 사용되는 어노테이션 / 주로 라이브러리
			각 라이브러리 회사마다 너~~~~~~~~~무 다양하다.
			1. 서블릿 관련 어노테이션 @WebServlet("/board")
            2. 웹 소켓 관련 어노테이션
                @ServerEndpoint("/socket") @OnOpen @OnClose @OnMessage @OnError
            3. 롬복 관련 어노테이션
                @Getter @Setter ~~~~~
            4. 스프링 관련 어노테이션

[ @ : 메타 어노테이션 만들기 ]
    1. 인터페이스 으로 정의한 타입
    2. 목적 : 다형성 , 리플렉션(동적처리) , 유지보수 향상
    3. 만들기
        1. 인터페이스 키워드 앞에 @ 붙인다. + 어노테이션 설정
            @Retention( ) : 어노테이션 생성주기(유지기간)을 설정
                @Retention( RetentionPolicy.SOURCE ) : 컴파일 후 삭제됨 ( ex] Override )
                @Retention( RetentionPolicy.CLASS ) : .class 파일에 포함. 실행 중에는 사용 안함
                @Retention( RetentionPolicy.Runtime ) : 실행중 리플렉션 통해 사용
            @Target( )  : 어노테이션 적용할 수 있는 위치(대상) 설정
                @Target( ElementType.TYPE ) : 클래스,인터페이스,열거형 타입 사용
                @Target( ElementType.FIELD ) : 멤버변수 에서 사용
                @Target( ElementType.METHOD ) : 메소드 에서 사용
                @Target( ElementType.PARAMETER ) : 메소드 매개변수 에서 사용
                @Target( ElementType.CONSTRUCTOR) : 생성자 에서 사용
                @Target( ElementType.LOCAL.VARIABLE) : 지역변수 에서 사용
            @interface 인터페이스명{}
        2. 추상메소드를 만든다.
            - 추상메소드란 : 메소드의 구현부 없고 선언부만 선언하는 메소드
            String value1();
        3. 선언한 어노테이션을 사용할 코드 위에 @생성한어노테이션명
            @Annotation1(  )
            public void method3(){}
        4. ( ) 안에 속성 값을 대입할 수 있다.
            @Annotation1( value1="value1 값 저장" )
            public void method3(){}

    4. * 동적처리 * : 실행 중 에 어노테이션 기능들이 주입 된다.
    5. 리플렉션된 클래스/인스턴스 정보 확인
        (1)
        try {
            Method method = 확인할클래스명.class.getMethod("확인할메소드");
            확인할어노테이션명 변수명 = method.getAnnotation( 확인할어노테이션명.class);
            System.out.println( 변수명.확인할메소드명() );
        } catch (Exception e) {  System.out.println(e);  }
        (2)
        확인할어노테이션명 변수명  = 확인할클래스명.class.getAnnotation( 확인할어노테이션명.class );
        System.out.println( 변수명.확인할메소드명() );
        System.out.println( 변수명.확인할메소드명() );





























